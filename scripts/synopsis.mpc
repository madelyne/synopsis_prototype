from Compiler import comparison
from Compiler import mpc_math
from Compiler.library import for_range
from Compiler.instructions import *
from Compiler import types
# from Processor import binary_file_io
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from contextlib import redirect_stdout
# from laplace import apply_laplace_mechanism
from math import log2
from util import if_else
from typing import List, Iterator
from contextlib import contextmanager
import io
import sys
import json
import time
import numpy as np
import pprint
import random
import inspect



_DEBUG = True
print_secrets=True

# arithmetic funcs

# absolute value
def abs(v): 
   # or just v.s = 1/0
   return v * ((v>0) - (v<0))
  

# sfix and sfloat ln
def ln(x):
   return mpc_math.log_fx(x, math.e)


# convert neg sign bool eval (0) to -1 
def find_sign(v):
   return if_else(v < 0, -1, 1)


# translate unif-randomly drawn samples in the interval [-0.5, 0.5] to random draws from laplace distribution
def laplace_inverse_cdf(unif, scale):
   
   laplace_noise = Matrix(1, len(unif[0]), sfix)
   sign_corrected = Matrix(1, len(unif[0]), sfix)
   
    
   @for_range_opt(len(unif[0]))
   def _(i):
      sign_corrected[0][i] = find_sign(unif[0][i])
      
      unif_abs = abs(unif[0][i])
    
      laplace_noise[0][i] = -scale * sign_corrected[0][i] * ln(1 - 2 * unif_abs)

   return laplace_noise
  
 
# combine data vecs and laplace noise matrix
def apply_laplace_mechanism_one(vecs, eps, sen, phase):
   
   # scale is sensitivity over epsilon allowance
   scale = cfix(sen / eps) 

   # FT queries: counts noising
   
   unif_sample = unif_random_gen(1, 1, 1, 1)
   
   noise_for_count = laplace_inverse_cdf(unif_sample, scale) 

   noised_count = sfloat(vecs[0][0]) + sfloat(noise_for_count[0][0])

   return noised_count


# return n_vecs x vec_dim matrix of unif-randomly generated samples (for noising dataspace)
def unif_random_gen(bitlength, n_vecs, vec_dim, vec_length):

   bitlength = 3
   
   M = Matrix(1, vec_length, sfix)

   @for_range_opt(vec_length)
   def _(i):
      randint = sint.get_random_int(bitlength)

      # normalize to interval [0, 1] and shift 0.5 to left to obtain randint in [-0.5, 0.5]
      fraction = (sfix(randint) * sfix(2**(-bitlength))) - 0.5

      M[0][i] = fraction   
   
   return M # 1-dim matrix of sfloats


# apply distance (NOT eligible counts) threshold; accepts (1 x n) matrix and returns array
def apply_threshold(data, count_threshold):

   count_threshold = sfloat(count_threshold)
   eligible = Array(len(data), sint)   
   eligible[0] = sint(0)
   eligible_arr = Array(len(data), sint)
   
   @for_range_opt(len(data))
   def _(i):   
      eval_result = sint(data[i] < count_threshold).if_else(sint(1), sint(0))
      eligible[0] = eligible[0] + eval_result
      eligible_arr[i] = eval_result
   
   return eligible, eligible_arr 


# generate duplicate/concatenated query vector
def pad_query(query, rows, cols): # output size is query size x database size

   dup = rows

   # Duplicate and concatenate the vector
   padded_q = query * int(dup)
   
   return padded_q


# 2xq
def two_x_q(data, query): # output size is query size x database size; accepts two one-dim matrices
     
   composite = Array(len(data), sfix) 
   
   total = len(data)

   print_ln("calculate 2xq")
      
   client = Array(1, sfix)
   
   # scalar doubling
   composite = [2 * a * b for a, b in zip(data, query)]

   return composite


# q^2
def squared_q(query): # output size is query size  

   print_ln("calculate q^2")

   q_squared = Array(int(len(query)), sfix)

   q_squared = [a * a for a, a in zip(query, query)]

   return q_squared   
   

# string together (x - q) calculations
def find_dist(data, data_sq, query): # accepts MultiArray and Matrix; returns Array

   # decompose squared diff into x^2 - 2xq + q^2
   # -- x^2 happens on intake, before querytime, and is a private x private calculation
   # -- 2xq happens during querytime, and is a private x public calculation
   # -- q^2 happens during querytime, and is a public x public calculation
   # as a further note, all operations are on a one-dim vector: 
   # database elements are concatenated to this single-row vector, squared element-wise (x^2), multiplied modulo the size of the query vector (2xq)     
   
   # query and dataspace as matrices of sfloats
      
   rows = len(data) / len(query)
   cols = len(query)

   print_ln('rows (number of database entries): %s', rows)
   print_ln('cols (size of embedding vector): %s', cols)
   
   padded_q = pad_query(query, rows, cols)

   two_ex_q = two_x_q(data, padded_q)

   q_squared = squared_q(padded_q)  
 
   diffed = Array(int(rows * cols), sfix)
   diffed = [a - b + c for a, b, c in zip(data_sq, two_ex_q, q_squared)]
 
   # sum every sequence of [query-length]-element sfixes together 

   sums = Matrix(1, int(rows), sfix)
   sums[0] = [sum(diffed[i:i + cols]) for i in range(0, len(data), cols)]   

   return sums[0] 
  
  
# FC query
def fc(data, data_sq, query, threshold, eps, sen):

   print_ln("---------------fine-grained count query-----------------")
   print_ln("epsilon budget: %s", eps)
   
   print_ln("begin distance calculation")
   dist_mat = find_dist(data, data_sq, query) # returns (unnoised) 1xn IP matrix (diff dataspace and query vector)   
   print_ln("begin thresholding")
   thresholded_count, threshold_arr = apply_threshold(dist_mat, threshold) # returns array containing single element (eligible query counts) 
   noised_count = apply_laplace_mechanism_one(thresholded_count, eps, sen, 1) # returns noised query count

   print_ln("noised thresholded count: %s", noised_count.reveal())
   return noised_count      
   

# CC query 
def cc(data, data_sq, query, threshold):

   print_ln("---------------coarse-grained count query-----------------")
      
   rows = len(data) / len(query)
   cols = len(query)
   
   # find unnoised dists for error checking
   dist_start = time.time()
   true_mat = find_dist(data, data_sq, query)
   dist_stop = time.time()
   thresholded_count, thresholded_arr = apply_threshold(true_mat, threshold)
   
   print_ln("thresholded count: %s:", thresholded_count[0].reveal())	 
   return thresholded_count
     

# FT query 
def ft(data, data_sq, query, ball_threshold, eps, sen, release_threshold):
   
   print_ln("---------------fine-grained threshold query-----------------")
   print_ln("epsilon budget: %s", eps)

   # calculate unthresholded count in secret
   dist_mat = find_dist(data, data_sq, query) # returns (unnoised) 1xn IP matrix (diff dataspace and query vector)   
   thresholded_count, threshold_arr = apply_threshold(dist_mat, ball_threshold) # returns array containing single element (eligible query counts) 
   noised_count = apply_laplace_mechanism_one(thresholded_count, eps, sen, 1) 

   flag = sint(noised_count > release_threshold).if_else(1, 0)
 
   print_ln("thresholded result: %s", flag.reveal())
 
   return flag
 

# CT query
def ct(data, data_sq, query, ball_threshold, release_threshold):
   
   print_ln("---------------coarse-grained threshold query-----------------")
   
   # calculate unthresholded count in secret
   true_mat = find_dist(data, data_sq, query)
   thresholded_count, thresholded_arr = apply_threshold(true_mat, ball_threshold)

   flag = sint(thresholded_count[0] > release_threshold).if_else(1, 0)

   print_ln("thresholded result: %s", flag.reveal())

   return flag     


# detailed error analysis (not currently called; call on threshold_arr in count queries to use)
def error_checking(y_true, y_pred): # for coarse-grained queries only
   
   tn = Array(1, sfloat)
   tn[0] = sfloat(0)   
   tp = Array(1, sfloat)
   tp[0] = sfloat(0)
   
   fp = Array(1, sfloat)
   fp[0] = sfloat(0)
   fn = Array(1, sfloat)
   fn[0] = sfloat(0)   
 
   y_ip = Array(len(y_true), sfloat)
   y_diff = Array(len(y_true), sfloat)

   print_ln("len of y_true: %s", len(y_true))  

   print_ln("first and second elements of y_true: %s, %s", y_true[0].reveal(), y_true[1].reveal())   
 
   @for_range_opt(len(y_true))
   def _(i):
      # inner product for checking TPs
      y_ip[i] = sint.dot_product(y_pred[i], y_true[i])
   
   @for_range_opt(len(y_true))
   def _(i):
      print_ln("[%s] true value: %s ; predicted value: %s", i, y_true[i].reveal(), y_pred[i].reveal())
      y_diff[i] = y_true[i] - y_pred[i]
       
   @for_range_opt(len(y_ip))
   def _(i):
      tp[0] = tp[0] + y_ip[i]

   @for_range_opt(len(y_diff))
   def _(i):
      fn_count = (y_diff[i] == 1).if_else(sint(1), sint(0))
      fn[0] = fn[0] + fn_count
      
      fp_count = (y_diff[i] == -1).if_else(sint(1), sint(0))
      fp[0] = fp[0] + fp_count


   # total len - TP - FN - FP for TNs   
   tn[0] = (len(y_true) - (tp[0] + fn[0] + fp[0])) / len(y_true)
   fn[0] = fn[0] / len(y_true)
   fp[0] = fp[0] / len(y_true)
   tp[0] = tp[0] / len(y_true)

   print_ln('tn rate: %s', tn[0].reveal())

   print_ln('tp rate: %s', tp[0].reveal())
   
   print_ln('fn rate: %s', fn[0].reveal())      
   
   print_ln('fp rate: %s', fp[0].reveal())


#~~~~~~~~~~~~~~ file io ~~~~~~~~~~~~~~~~~#

sfix.set_precision(16, 31)
 
# 524288 for full sample database, dim 1024 x 512
database = Array(524288, sfix) # database only
database_sq = Array(524288, sfix)

# read vectors from player 0
@for_range_opt(524288)
def _(i):
   # for j in range(1):
   database[i] = sfix.get_input_from(0)

# read squared database from player 1
@for_range_opt(524288)
def _(i):
   database_sq[i] = sfix.get_input_from(1)


#~~~~~~~~~~~~~~~ generate test data ~~~~~~~~~~~~~~~#

# database = Array(30000, sfix)

# query_secret = Matrix(1, 500, sfix)

# 512-dim public query
query_clear = [-0.6210206841908028, -0.06981545839289649, -0.40598407136355164, 0.0924903945156322, -0.3033525743004857, -0.6943577352932224, 0.08230516289793428, -0.24293107036543293, 0.09857051275165318, 0.6029165496100354, 0.2505367715475104, 0.5766770618168362, 0.31697787815524436, 1.4535859184610374, 0.08333563334942051, 0.28515965941628163, -0.18276230601138654, -0.520012777415462, 0.2846032174207717, -0.9626352615319619, 0.28375871770993544, 0.24836815695875586, -0.15394611557340768, -0.2955080696914198, 0.6084515324925077, -0.21462796323366012, -0.39585145064716415, -0.3124539582784802, 0.6800275951913598, 0.5548612278168162, -0.19974400532276032, 0.8930111080789103, -0.11210344685975973, 0.5114188494866185, -0.9747540774574115, 0.13594913019664626, 0.023724660438782366, -0.5236170769309769, 0.2072648945001621, 0.8487859877480874, -0.18317978025038814, 0.6175139403516092, 0.2215907879540288, 0.15520187453752413, -0.15366551832514191, 0.002422763691547661, -0.07029949803771066, 0.4647864601623458, 0.6850314638817057, -0.28787624665675937, 0.2774540140741195, 0.06585624502085557, 0.30887626780418603, -0.03468927394149074, -0.09584682726017757, -0.13768261052405936, -0.04976571552231625, -0.3954526849586111, 0.22674304277522545, -0.193274015074372, -0.13269537252479174, -0.43353204961687103, 0.18742635079722725, 0.2889395436152993, 0.06441013139885188, -0.3693810612169225, 0.8501748460539257, 0.09304058309641157, 0.4477063541678395, 0.019926345069926306, 0.6705863480634124, 0.4106734061741025, 0.09118402384931595, 0.2738839696378914, -0.03291668314520595, 0.28573373373726335, -0.7178954284443096, 0.048213620742832586, 0.2940060518266458, 0.2960765321636706, -0.056072047073361664, -0.50830553834787, 0.26320941062487135, -1.1189453876920017, -0.4921814507882408, -0.15184226623650454, 0.4748066145608178, -0.2600046114848963, 0.34805128335756763, -0.47898909233791775, -0.4805495979470432, 0.08034334254351216, -0.07468183672613526, -0.6882320875769309, -0.15153284393751248, 0.3491997723917385, 0.3003957070959886, -0.24134032890978047, 0.3312435678127583, 0.29345040394115207, -0.20093214187175296, -1.6469221444295887, 0.2675840144466714, 0.5674180008898391, 0.11770998211587345, -0.3769077216605143, -0.6550479775493318, 0.24186209668821898, -0.020371658014860045, -0.2616092767772802, -0.18185832841404267, 0.21603511399551745, 0.3295334838876124, -0.7004961021395413, 0.18894618354847126, 0.7091108173530074, -0.8688188794510072, -0.08204198279634126, 0.19312897561786024, 0.6471278482125049, 0.1631953046244773, -0.4352580844412947, 0.1515149732803694, 0.09719846481573582, -0.061520196910018005, -0.11581594146961346, -0.967180596193552, -0.5417316118208633, 0.8705702257243904, -0.5954529559148174, 0.3344127710105341, 0.044675710118411094, 0.05890911873541103, 0.2552952086840564, -0.02986628024648122, -0.40526518859387417, -0.6461376923647448, -0.09829637164730969, 0.7021564621573387, -0.2100309857868568, -0.5935392157940957, -0.1287205207066342, -0.6787689311510086, -0.3057136886128413, -0.15344211238000116, -0.0077157875803460785, 0.5261394638640176, 0.06784080371798262, 0.42738495652231434, 0.9782280144691531, 0.14862581885130943, -0.22919056929413176, 0.4879792892185899, 0.5125999079796815, 0.2038015468946035, -0.25095875881160984, -0.73403512180939, 0.14075130648539316, -0.23707525415215366, 0.3452409117046119, -0.20065894144730523, 0.0718769473730959, 0.20650230088042332, -0.6347646227997774, 0.2230022060200202, -0.046485557378020924, 0.7509444174452468, 0.2181509324001149, -0.2411613328495401, -0.1528671262849773, -0.07088453493696252, -0.03665192136927142, 0.8899265907131272, 0.3238093833788993, 0.6074249305564717, -0.4766325846111433, 0.38651881525324416, -0.007622122469135101, -0.46840960324682096, 0.5098060728954872, 0.10340935710358437, -0.6832567116841943, -0.35383396764702607, 0.6841648083050026, -0.6332140990490359, 0.16073847120153767, -0.06540543325705081, 0.9127648572542733, 0.09548513961243776, -0.3482675013848771, 0.0825935264442494, -0.09406204895636983, -0.07269876772991912, -0.3470675400366166, 0.28904089655160675, 0.24350626115942586, 0.23113721579026336, 0.7284636319646185, 0.6506376020246423, 0.2212078792704458, 0.28273356556044216, -0.6906949190371716, -0.18016631979561304, -0.07008502675205742, 0.26077823667396266, -0.4106407795722646, -0.025794073727424083, 0.030792232308543943, -0.20203568896626867, -0.052306068281095075, 0.290473334362412, -0.17278293949188134, 0.06757840018178213, -0.20823279524637342, 0.13274444678302322, 0.08486793981379717, 0.6340318957893488, 0.4841228960586009, 0.5281639795896884, 0.7990743842759966, -0.04624482341093092, -0.5790206671025481, 0.3303317086377441, 0.6330196725820593, 0.03435315444112916, -0.03535293197116445, 0.42497466446939464, 0.41456420284740636, -0.19307681935895016, 0.1591886410757612, -0.37061420983421833, 1.3050570622371078, 0.915393241130875, 0.5953676995144745, -0.3831684404320162, 0.2977747864014021, 0.48925320767527625, -0.7116524891699662, 0.33371671727985386, -0.1000438693460246, 0.22444151491995046, -0.4164308452967339, -0.32468948535335923, -0.1807712588204307, 0.10522747848920444, -0.3277952271527065, -0.13670163741810631, -0.19964583585458667, 0.5047325447893246, 0.3644565843414875, 0.32244241004852525, 0.4362333658424387, -0.8268722937214467, -0.03258727380378587, 0.5979761231931203, -0.06378506664768469, -0.10745712871518198, 0.26509931887254523, 0.5197537465939699, 0.5828109670703144, -0.35037106731522705, 0.48613773363753343, -0.526645775161086, -0.5013519341958778, -0.17982913900063974, -0.2414336485732265, -0.5286757927817256, 0.332510917939968, 0.12099312991608926, -0.2437733011410826, 0.007685832546725363, 0.1528001993570791, 0.6192796244055848, -0.04028119628027102, 0.24465897996122102, -0.11478853957591788, -0.46510653101085325, -0.074213390669985, -0.21606157477272223, 0.5656054531267645, 0.42777837743078506, -0.1213995516246732, 0.39688886060831796, 0.783626254353397, 0.005024691107702123, 0.3570454563647669, -0.008157488431276949, -0.01538672754589182, 0.4442781275137046, 0.357537303153102, -0.37199536794872995, -0.5666020570424326, 0.18894158947067055, -0.36509784614871144, -0.3678140893462247, 0.6227251776308721, 0.2042940250874303, -0.10539553128603135, 0.7855800979433345, 0.7925383570659205, -0.009905230646865673, -0.22198493239641254, -0.08969884047407117, 0.8210824915660454, 0.1115107368236602, 0.08223577988624325, -0.04492222119432426, -0.1808703329627691, 0.16814066981529974, 0.20966566598254038, 0.17518132908915238, -0.3250318844119787, -0.3433359072427563, 0.14226486454901274, -0.8150984104069717, -0.39754260658866636, -0.07376811087489532, -0.4800724469793088, 0.0008055320258298082, 0.7903952983159176, 0.20632591157566846, -0.05979974674567179, -0.27234227711492554, 0.2835915694281773, -0.47188321755681073, 0.42300200319619136, -0.7367271329061208, -0.18704314933101546, -0.2996933034296633, 0.5952497134710197, 0.10643814781024954, 0.4036795747304407, 0.0739725969282031, 0.1367392670411037, 0.2221181208303542, 0.14758300220450887, -0.09346451621758231, -0.6908142116478848, 0.21456321773150178, 0.6388678830445212, -0.2809967792192208, 0.6798996341662442, 0.26856631975243855, -0.5167181276658572, -0.606379354294485, -0.24309714968732948, 0.4888954311601336, -0.3278994116223902, -0.1988719543334589, 0.13312122054642803, 0.6944688933961087, 0.5565518822129657, -0.25679431572655853, 0.456951283936585, -0.0707199937798639, 0.0981830795278304, 0.42528774087573185, -0.32433374581229946, 0.3002895468471988, -0.6569547860620887, -0.01056775097541457, 0.6582106348020166, -0.566635735089809, 0.4078515380937042, 0.22656795337263766, 0.056926699713804596, 0.3890395380814621, -0.12563891122184737, -0.3480194702275385, -0.5681606005103947, 0.136663832710061, 0.09067417266930795, -0.39965948962491094, 0.10800803384846797, 0.019770786605321104, -0.05367712915453765, -0.1751418112974371, -0.8598697989907511, 0.4617658147795592, -0.2570712349119325, -0.3274893321303053, 0.49517515283960695, 0.4302612772121902, -0.21991467736328202, 0.5092493192708598, 0.1554199510328223, 0.6776880103540766, 0.4782485387536289, 0.028742391751738317, 0.7186368892309895, 0.1265674662458158, 0.211189301402951, -0.595314158466106, -0.4467827479595168, -0.1544541495494596, -0.16961987756807895, 0.11429083254147596, 0.36253559420959725, 0.2263558154393364, -0.6193615936190773, -0.2403090716287466, -0.2631481342029617, 0.4523411787539132, 0.01605957951645029, -0.4050009349013292, 0.3656714769271775, 0.7868697465963148, 0.13677373147373326, -0.03548394746535924, -0.1803102988020891, -0.57502288712833, 1.050774541008506, 0.019952994620572304, 0.6291086282571562, -0.24578850935271307, 0.567923069689027, 0.3446692428932455, -0.18057168342537316, -0.4291148197270237, 0.5167279119710485, -0.6807548508241669, 0.2848679451047995, -0.5117160876463362, 0.10157808474917512, -0.05082641057886994, 0.015030894583563353, 0.23041100435160333, -0.7925437819888261, -0.2739845656415809, -0.30517881628137644, -0.24634399658557665, -0.37430188640320095, 0.5153642068329004, 0.0002389635859161715, 0.2861895567025547, -0.8777354368243169, 0.12791565562782659, -0.3957802175365297, 0.4748397828715763, -0.0471779047436274, -0.23643180295200733, 0.039524046645337166, 0.7344994700674806, -0.13353709413527726, 0.17548390999247201, -0.18939127752955787, 0.2251284748151539, -0.2647496396536503, -0.008910913543417165, 0.19583637577335622, -0.06408641581552468, -0.610049242867283, -0.1144975758297074, 0.06893630468327638, -0.07820053922308948, 0.6649762920342729, -0.4394342231406749, 0.3112708163000989, -0.3978906143452731, 0.30930253504992467, 0.28381607624743377, -0.06339355677680139, 1.0925628495578583, -0.583377523508446, 0.19654862091059186, 0.433541112308277, 0.3548148677252986, 0.05389441817707438, 0.1278067497888727, 0.19029192673175788, -0.9413112478744995, 0.6898573053492572, 0.10617008950971879, 0.04954967479292807, 0.3288170889882724, 0.049503605557514985, -0.23550092538177736, 0.16150041257268258, -0.24050150406750004, -0.08340921031555429, -0.6944042563810245, 0.3355769967238642, 0.09223441233834982, 0.3538052929299548, 0.29065899622175484, 0.3441088451309924, 0.3787782704654593, -0.508808559064435, -0.0030581352039179, 0.4482424142179595, -0.7605985062626334, 0.1528193695368011, 0.20620034811943402, 0.4953828821890347, -1.029116030641656, -0.03608399463598301, 0.4126398824437027, 0.47727292617984407, -0.24294923006128924, -0.38361629918287865, 0.03114168028412688, 0.18538013207534526, 0.5858537693220308, 1.0675027616923525, 0.0734380589508378, -0.10636028578999154, 0.46603202703615837, -0.39654957788108447, -0.2343818806584814, 0.4976929563847045, -0.5240718145156642, 0.1103994897465822]


# 300-dim public query
# query_clear = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# for random-gen database
# @for_range_opt(30000)
# def _(j):
#   database[j] = sfix(random.uniform(0, 1))
   # randgen_stop = time.time()
   # print_ln("randgen timing: %s", randgen_stop - randgen_start)


#~~~~~~~~~~~~~~ calls ~~~~~~~~~~~~~~~#

# function calls for all query types take the following form:

fc_test = fc(database, database_sq, query_clear, 1.3, 4, 1)

cc_test = cc(database, database_sq, query_clear, 1.3)

ft_test = ft(database, database_sq, query_clear, 1.3, 4, 1, 5)

ct_test = ct(database, database_sq, query_clear, 1.3, 5)


